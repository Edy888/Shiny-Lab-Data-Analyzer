---
title: "draft"
format: html
editor: visual
---

```{r}
library(openxlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyverse)
```

## 1. Загрузка информации из БД

Базы данных хранятся в дирректории `C:\Users\Eduard\Desktop\DB\4. DB from clients`. Так как не могу подключиться к `accdb` - буду вручную их открывать:

-   экспортировать `xlsx` файлы из БД в папку `C:\Users\Eduard\Desktop\DB\4. DB from clients\all_xlsx:` каждая БД будет иметь название MEDSI_1, MEDSI_2 ...

-   каждый файл будет заканчиваться названием БД: results_medsi_1, results_medsi_2, ...

-   в каждом файле будет создаваться столбец `id_lab` с названием лаборатории: первая буква и количество букв:

    -   MEDSI = m6

    -   CMD = c3

    -   HELIX = h5

    -   INVITRO = i7

    -   .....

-   **xlsx файлы будут 3-х видов:**

    -   `adjustments` со столбцами:

```{r adjustments}

library(openxlsx)

adjustments_cols <- c(1:12, 21:34, 38:39)
        
all_adjustment <- openxlsx::read.xlsx('c:/Users/Eduard/Desktop/My_Projects/10. Shiny App/1. 4PL/data/adjustments_lab/m6_1.xlsx', cols = adjustments_cols)

names(all_adjustment)
str(all_adjustment)
```

-   

    -   `kits` : информация из вкладки **НАБОРЫ** с коэффициентами

```{r kits}

kits <- c('id_lab',
          'Test_Name',
          'Full_Test_Name',
          'Kit_Lot',
          'Kit_Expiration',
          'Bead_Lot',
          'Reagent_1_Lot',
  
            'Test_Number',
            'Assay_Min',
            'Assay_Max',
            'Default_Units',
            'Reported_Units',
            'Current_Report_Multiplier',
            'Alternate_Units_1',
            'Conversion_Factor_1',
            'Auto_Dilution_Factor',
            'Kit_Status',
            'Pre_Dilution_Factor',
  
        'Adjust_Frequency',
        'Formula_Number',
        'Num_Of_Adjustors',
        'Adjustment_Method',
        'Adjustor_Lot_1',
        'Adjustor_Lot_2',
        'CV_Low_Limit',
        'CV_High_Limit',
        'Adjustment_Criteria_1',
        'Adjustment_Criteria_2',

            'Adjustor_Status',
            'Times_Adjusted',
            'Last_Adjust_Date',
            'Slope',
            'Intercept',
            'Adjustor_Concentration_1',
            'Adjustor_Concentration_2',
            'Curve_Parameter_1',
            'Curve_Parameter_2',
            'Curve_Parameter_3',
            'Curve_Parameter_4',
            'CPS_Cutoff',
  
              'Curve_Parameter_5',
              'Curve_Parameter_6',
              'Curve_Parameter_7',
              'Curve_Parameter_8',
              'Dose_Parameter_1',
              'Dose_Parameter_2',
              'Dose_Parameter_3',
              'Dose_Parameter_4',
              'Dose_Parameter_5',
              'Dose_Parameter_6',
              'Dose_Parameter_7',
              'Dose_Parameter_8',
              'Adj_Allergen_Code',
              'Adj_Allergen_Lot',
              'Ctrl_Allergen_Code',
              'Ctrl_Allergen_Lot',
              'Standard_Class_0',
              'Standard_Class_1',
              'Standard_Class_2',
              'Standard_Class_3',
              'Standard_Class_4',
              'Standard_Class_5',
              'Standard_Class_6',
              'Extended_Class_0',
              'Extended_Class_1',
              'Extended_Class_2',
              'Extended_Class_3',
              'Extended_Class_4',
              'Extended_Class_5',
              'Extended_Class_6'
        )
```

-   

    -   `results` :

```{r}
library(openxlsx)

col_results <- c(1, 2, 3, 4, 6,	7, 10, 11, 20,	21,	25,	26,	29,	33,	34,	35,	41,	54,	55,	59,	60,	61,	78)

all_results <- openxlsx::read.xlsx('c:/Users/Eduard/Desktop/My_Projects/10. Shiny App/1. 4PL/data/results_lab/m6_1.xlsx', cols = col_results)

names_list <- names(all_results)
names_list
str(all_results)
```

### 2. Код для страницы 3 с результатами

Для хранения файлов с результатмаи из разных лабораторий есть папка "C:/Users/Eduard/Desktop/My_Projects/10. Shiny App/1. 4PL/data/results_lab", куда периодически будут добавляться файлы .xlsx . Наша задача:

1.  На боковой панели создать вкладку для выбора папки с файлами. После этого должен выполняться код по загрузке и созданию общей таблицы `all_lab_results` из всех файлов в папке . Далее будем использовать этот файл для аналитики :

````         
```         
names(all_lab_results)  

[1] "id_lab"                 "Unique_Record_ID_Num"   "Identifier"             "Accession_Num"           [5] "Patient_ID_Num"         "Name"                   "Sex"                    "Birth_Date"              [9] "Dilution_Factor"        "Reagent_Name"           "Result"                 "Range_Low"              [13] "Range_High"             "Limit_High"             "Limit_Low"              "CPS"    [17] "Adjustment_Status"      "Times_Of_Adjustment"    "Date_And_Time_Started"  "Date_And_Time_Resulted" [21] "Bead_Lot"               "Reagent_Lot_Cycle_1"    "Kit_Lot"                "Formula_Number"         [25] "offLineDilution_Factor"
```
````

2.  При загрузке файлов делаем фильтрацию по столбцам:

    `columns_to_load <- c(1, 2, 3, 4, 5, 6, 7, 8, 10, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 40, 53, 54)`

3.  Подготавливаем файл для работы (код ниже).

4.  После загрузки должно появиться: файл успешно загружен и обновлен

```{r}
# Путь к директории с файлами results
data_directory <- "C:/Users/Eduard/Desktop/My_Projects/10. Shiny App/1. 4PL/data/results_lab"

# Индексы столбцов, которые нужно загрузить
columns_to_load <- c(1, 2, 3, 4, 5, 6, 8, 10, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 40, 53, 54)

# Функция для загрузки всех файлов и объединения их в один датафрейм
load_results_data <- function(directory, columns) {
  # Получаем список всех файлов
  files <- list.files(directory, full.names = TRUE)
  
  # Читаем каждый файл и загружаем только указанные столбцы
  results_data <- map_df(files, ~ read.xlsx(.x, cols = columns))
  
  # Преобразуем id_lab в фактор
  results_data$id_lab <- as.factor(results_data$id_lab)
  
  return(results_data)
}


all_lab_results <- load_results_data(data_directory, columns_to_load)


# Преобразуем соответствующие столбцы в факторные
all_lab_results <- all_lab_results %>%
  mutate(
    id_lab = as.factor(id_lab),
    Reagent_Name = as.factor(Reagent_Name),
    Adjustment_Status = as.factor(Adjustment_Status),
    Times_Of_Adjustment = as.factor(Times_Of_Adjustment),
    Bead_Lot = as.factor(Bead_Lot),
    Reagent_Lot_Cycle_1 = as.factor(Reagent_Lot_Cycle_1),
    Kit_Lot = as.factor(Kit_Lot),
    Formula_Number = as.factor(Formula_Number)
  )


all_lab_results <- all_lab_results %>%
  mutate(
    Birth_Date = ymd(Birth_Date),  # Преобразуем дату рождения в формат Date
    Date_And_Time_Started = ymd_hms(Date_And_Time_Started),  # Преобразуем в POSIXct
    Date_And_Time_Resulted = ymd_hms(Date_And_Time_Resulted)  # Преобразуем в POSIXct
  )

str(all_lab_results,10)
```

Ваши данные теперь имеют идеальную структуру для анализа и визуализации:

1.  **Факторы**: Категориальные переменные, такие как `id_lab`, `Sex`, `Reagent_Name`, `Adjustment_Status`, `Times_Of_Adjustment`, и другие идентификаторы или коды, были успешно преобразованы в факторы, что экономит память и делает данные более управляемыми.

2.  **Даты и время**: Столбцы `Birth_Date`, `Date_And_Time_Started`, и `Date_And_Time_Resulted` теперь в подходящих форматах (`Date` и `POSIXct`), что облегчает работу с временными и датными операциями, такими как фильтрация по датам, сортировка, вычисление интервалов времени и т.д.

3.  **Числовые значения**: Количественные показатели, такие как `Result`, `Range_Low`, `Range_High`, и другие, остались в числовом формате, подходящем для анализа и вычислений.

Теперь хочу построить график по контролям качества, в котором будет отображаться данные по калибровкам и CPS.

```{r}

all_lab_qc_ECP <- all_lab_results |> 
  filter(Identifier == 2 & Reagent_Name == "ECP" & Result >= 0 )

# Создаем график с двумя осями Y
ggplot(all_lab_qc_ECP, aes(x = Kit_Lot, y = CPS, color = Kit_Lot)) +
  geom_point() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
```

```{r}
# Создаем график с двумя осями Y
ggplot(all_lab_qc_ECP, aes(x = Result, y = CPS, color = Kit_Lot)) +
  geom_point() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  ) +
  theme_minimal()
```

::: callout-note
как можно оценить , есть ли какие-то отклонения в трендах концентрации и CPS? просто CPS это сырые данные которые не зависят от калибровки, а концентрация зависит от калибратора и полученных коэффициентов. Поэтому хочу оценивать проблема в калибровке (если нет изменения тренда по CPS после калибровки на контроли не проходят
:::

### 3. Построение MCD

#### 1. Загружаем adj, сортируем для ECP, выполняем построение для всех лотов.

```{r adj}
data_directory_adj <- "C:/Users/Eduard/Desktop/My_Projects/10. Shiny App/1. 4PL/data/adjustments_lab"

adjustments_cols <- c(1,	2,	3,	4,	5,	6,	8,	9,	10,	11,	20,	21,	22,	23,	24,	25,	26,	27,	28,	29,	30,	31,	37,	38)

# Функция для загрузки всех файлов и объединения их в один датафрейм
load_adjustment_data <- function(directory, columns) {
  # Получаем список всех файлов
  files <- list.files(directory, full.names = TRUE)
  
  # Читаем каждый файл и загружаем только указанные столбцы
  results_data <- map_df(files, ~ read.xlsx(.x, cols = columns))
  
  # Преобразуем id_lab в фактор
  results_data$id_lab <- as.factor(results_data$id_lab)
  
  return(results_data)
}

adjustments_all <- load_adjustment_data(data_directory_adj, adjustments_cols)

adjustments_all_group <- adjustments_all |> 
  group_by(Test_Name, Kit_Lot, id_lab) |> 
  summarise(slope_mean = round(mean(Slope, na.rm = TRUE),4)) |> 
  filter(Test_Name == 'ECP')

```

```{r}
ggplot(adjustments_all_group, aes(x = Kit_Lot, y = slope_mean, color = Kit_Lot)) +
  geom_line() +
  geom_point() +
  labs(
    title = "Изменения среднего наклона по партиям",
    x = "Kit Lot",
    y = "Средний наклон",
    color = "Лаборатория"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = sort(unique(adjustments_all_group$Kit_Lot)))+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))


```

```{r}
# Вычисляем среднее значение для slope_mean
mean_slope <- mean(adjustments_all_group$slope_mean, na.rm = TRUE)

# Создаем график с линией среднего и текстом
ggplot(adjustments_all_group, aes(x = as.factor(Kit_Lot), y = slope_mean, fill = as.factor(Kit_Lot))) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  # Добавляем горизонтальную линию для среднего значения
  geom_hline(yintercept = mean_slope, color = 'darkgreen', size = 2, alpha = 0.3) +
  # Добавляем текст с указанием среднего значения
  annotate("text", x = Inf, y = mean_slope, label = paste("Среднее =", round(mean_slope, 2)), 
           color = 'darkgreen', size = 4, hjust = 1.1, vjust = -0.5) +
  labs(
    title = "Распределение среднего наклона по тестам",
    x = "Kit Lot",
    y = "Средний наклон",
    fill = "Лаборатория"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )

```

```{r}
ggplot(adjustments_all_group, aes(x = as.factor(Kit_Lot), y = as.factor(Test_Name), fill = slope_mean)) +
  geom_tile() +
  scale_fill_gradient(low = "blue", high = "red") +
  labs(
    title = "Тепловая карта среднего наклона по тестам и партиям",
    x = "Kit Lot",
    y = "Тест",
    fill = "Средний наклон"
  ) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```

# I Работа с папкой adjustments:

После загрузки данных в `reactiveValues (rv)` хранятся следующие таблицы данных:

1.  `rv$calib_data` - это список (list), который содержит:

    -   `raw_data` - сырые данные из всех загруженных файлов калибровок после обработки

    -   `grouped_data` - сгруппированные данные с рассчитанными статистиками

    -   `last_update` - время последнего обновления данных

**Структура данных:**

```         
rv$calib_data = list(
    raw_data = data.frame(
        DateTimeOfAdjustment,
        Slope,
        Intercept,
        Test_Name,
        Kit_Lot,
        CV_Counts_Low,
        CV_Counts_High,
        CPS_Low_1:4,
        CPS_High_1:4,
        Adjustor_Concentration_Low,
        Adjustor_Concentration_High,
        Mean_CPS_Low,
        Mean_CPS_High,
        Adjustor_Lot_Low,
        Adjustor_Lot_High,
        Error,
        FileName
    ),
    
    grouped_data = data.frame(
        Test_Name,
        Kit_Lot,
        Count,
        Mean_Slope,
        SD_Slope,
        CV_Slope,
        Mean_Intercept,
        SD_Intercept,
        CV_Intercept,
        Files_Processed,
        Last_Update
    ),
    
    last_update = POSIXct
)
```

2.  `rv$processing` - логический флаг, который показывает, идет ли в данный момент обработка файлов (TRUE/FALSE)

Эти данные можно использовать в других частях приложения через:

-   `rv$calib_data$raw_data` - для доступа к необработанным данным

-   `rv$calib_data$grouped_data` - для доступа к агрегированным данным

-   `rv$calib_data$last_update` - для получения времени последнего обновления

-   `rv$processing` - для проверки статуса обработки
